@model ClienteModel

@{
    ViewData["Title"] = "Cadastro - Cliente";
}

<form id="frm-cadastro" enctype="multipart/form-data">
    <input asp-for="ID" type="hidden" />
    <div class="row mb-sm-3">
        <div class="col-sm-12 mb-sm-0 mb-2 col-12">
            <label asp-for="Nome" class="control-label">Nome</label>
            <input asp-for="Nome" type="text" class="form-control form-control-sm" required autocomplete="off" maxlength="50" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-auto mb-sm-0 mb-2 col-6">
            <label class="control-label">Tipo</label>
            <select class="form-select form-select-sm" asp-for="Tipo" required>
                <option value="" disabled selected>Selecione...</option>
                @await Component.InvokeAsync("DropTipoPessoa", new { tipo = Model.Tipo })
            </select>
        </div>
        <div class="col-sm-3 mb-sm-0 mb-2 col-6">
            <label class="control-label">Documento</label>
            <input id="Documento" name="Documento" onblur="validaDoc(this)" value="@Model.Documento" type="text" class="form-control form-control-sm" @(string.IsNullOrEmpty(Model.Documento) ? "disabled" : "") required autocomplete="off" maxlength="18" />
        </div>
        <div class="col-sm-3 mb-sm-0 mb-2 col-12">
            <label asp-for="Telefone" class="control-label">Telefone</label>
            <input asp-for="Telefone" type="text" class="form-control form-control-sm" data-telefones autocomplete="off" pattern=".{0}|.{14,15}" />
        </div>
    </div>

    @await Component.InvokeAsync("PgFooterSalvar", new { submit = true, cancelarController = "Cliente", cancelarAction = "Index" })

</form>

@section Scripts {
    <script>
        $('#frm-cadastro').submit(function (evt) {
            fn_submit(evt, '#frm-cadastro', '@Url.Action("Cadastro", "Cliente")', '@Url.Action("Index", "Cliente")', false);
        });

        document.addEventListener('DOMContentLoaded', function () {
            const tipoSelect = document.getElementById('Tipo');
            const documentoInput = document.getElementById('Documento');

            tipoSelect.addEventListener('change', function () {
                const tipo = this.value;

                // Habilita o campo
                documentoInput.disabled = false;

                // Remove classes antigas
                documentoInput.classList.remove('cpf', 'cnpj');

                // Limpa o valor e aplica a nova classe
                documentoInput.value = '';

                if (tipo === 'PJ') {
                    documentoInput.classList.add('cnpj');
                } else if (tipo === 'PF') {
                    documentoInput.classList.add('cpf');
                }

                // Reaplica as máscaras
                fn_mascaras();
            });
        });
    </script>
}
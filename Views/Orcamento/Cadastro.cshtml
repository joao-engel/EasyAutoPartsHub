@model OrcamentoCadastroModel

@{
    ViewData["Title"] = "Lançamento de Orçamento";
}

<form id="frm-cadastro" enctype="multipart/form-data">
    <input type="hidden" asp-for="ID" value="@Model.ID" />
    <div class="row mb-3">
        <div class="col-12 mb-3 mb-sm-0">
            <label class="control-label">Cliente</label>
            @if (!Model.ID.HasValue)
            {
                <input type="text" id="clienteNome" value="Selecione..." onclick="abrirModalClientes()" class="form-control form-control-sm" placeholder="Pesquisar" readonly />
                <input type="hidden" id="clienteID" name="clienteID" required />
            }
            else
            {
                <input type="text" class="form-control form-control-sm readonly" disabled value="@Model.Cliente" />
                <input type="hidden" id="clienteID" name="clienteID" value="@Model.ClienteID" />
            }

        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <label asp-for="Observacao" class="control-label">Observação</label>
            <textarea asp-for="Observacao" type="text" class="form-control form-control-sm" rows="2" maxlength="100"></textarea>
        </div>
    </div>

    <hr />

    <div class="row mb-3">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h6 class="mb-0">Itens do Pedido</h6>
            <button type="button" class="btn btn-sm btn-primary" onclick="abrirModalProdutos()">
                Adicionar Produto
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <table class="table table-sm table-bordered table-hover" id="tbl-produtos-vinculados">
                <thead>
                    <tr class="text-center">
                        <th class="col-4">Produto</th>
                        <th class="col-1">Quantidade</th>
                        <th class="col-1">Valor</th>
                        <th class="col-1">Total</th>
                        <th class="col-1">Ação</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Produtos != null)
                    {
                        int index = 0;
                        foreach (var produto in Model.Produtos)
                        {
                            var total = produto.Quantidade * produto.ValorUnitario;
                            <tr data-produto-id="@produto.ProdutoID">
                                <td>
                                    @produto.Produto
                                    <input type="hidden" name="Produtos[@index].ProdutoID" value="@produto.ProdutoID" />
                                </td>
                                <td>
                                    <input type="number" class="form-control form-control-sm quantidade-input"
                                           name="Produtos[@index].Quantidade"
                                           value="@produto.Quantidade" min="1" required
                                           onchange="atualizaTotal(this, @produto.ValorUnitario.ToString(System.Globalization.CultureInfo.InvariantCulture), @produto.ProdutoID)" />
                                </td>
                                <td>R$ @produto.ValorUnitario.ToString("N2")</td>
                                <td id="total-@produto.ProdutoID">R$ @total.ToString("N2")</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger" onclick="removerProduto(@produto.ProdutoID, this)">Remover</button>
                                </td>
                            </tr>
                            index++;
                        }
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="3" class="text-end">Total Geral:</th>
                        <th colspan="2" id="total-geral">R$ 0,00</th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <!-- Hidden input para armazenar os itens -->
    <input type="hidden" id="itensPedido" name="itensPedido" />


    @await Component.InvokeAsync("PgFooterSalvar", new { submit = true, cancelarController = "Orcamento", cancelarAction = "Index" })
</form>

@await Component.InvokeAsync("ModalClientes", new { todos = false })
@await Component.InvokeAsync("ModalProdutos")

@section Scripts {
    <script>

        $('#form-clientes').on('submit', function (e) {
            e.preventDefault();
            const radioSelecionado = $('#tbl-clientes input[name="clienteRadio"]:checked');

            if (radioSelecionado.length > 0) {
                const nomeCliente = radioSelecionado.closest('tr').find('td:nth-child(2)').text().trim();
                const idCliente = radioSelecionado.val();

                $('#clienteNome').val(nomeCliente || 'TODOS');
                $('#clienteID').val(idCliente);
            } else {
                $('#clienteNome').val('SELECIONE');
                $('#clienteID').val('');
            }
        });

        $(document).ready(function () {
            atualizaTotalGeral();
        });

        function abrirModalProdutos() {
            const modalProdutos = new bootstrap.Modal('#modal-produtos');
            modalProdutos.show();
        }

        //Manipulação de adicionar/remover produtos
        const produtosSelecionados = new Set();

        function adicionarProduto(produto) {
            if (produtosSelecionados.has(produto.id)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Produto já adicionado',
                    text: `${produto.nome} já está na lista.`,
                    timer: 2000,
                    showConfirmButton: false
                });
                return;
            }

            produtosSelecionados.add(produto.id);

            const tbody = document.querySelector('#tbl-produtos-vinculados tbody');
            const index = tbody.querySelectorAll("tr").length; // Define o índice dinâmico

            const tr = document.createElement('tr');
            tr.dataset.produtoId = produto.id;

            const preco = parseFloat(produto.preco) || 0;
            const quantidade = 1;
            const total = preco * quantidade;

            tr.innerHTML = `
                <td>
                    ${produto.nome}
                    <input type="hidden" name="Produtos[${index}].ProdutoID" value="${produto.id}" />
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm quantidade-input"
                           name="Produtos[${index}].Quantidade"
                           value="${quantidade}" min="1" required
                           onchange="atualizaTotal(this, ${preco}, ${produto.id})" />
                </td>
                <td>R$ ${preco.toFixed(2)}</td>
                <td id="total-${produto.id}">R$ ${total.toFixed(2)}</td>
                <td>
                    <button type="button" class="btn btn-sm btn-danger" onclick="removerProduto(${produto.id}, this)">Remover</button>
                </td>
            `;

            tbody.appendChild(tr);
            atualizaTotalGeral();
        }

        function removerProduto(id, btn) {
            produtosSelecionados.delete(id);
            const linha = btn.closest('tr');
            linha.remove();
            atualizaTotalGeral();
        }

        function atualizaTotal(input, preco, id) {
            const qtd = parseFloat(input.value) || 0;
            const total = qtd * preco;
            document.getElementById(`total-${id}`).textContent = `R$ ${total.toFixed(2)}`;
            atualizaTotalGeral();
        }

        function atualizaTotalGeral() {
            let totalGeral = 0;

            document.querySelectorAll('#tbl-produtos-vinculados tbody tr').forEach(tr => {
                const totalCelula = tr.querySelector(`td[id^="total-"]`);
                if (totalCelula) {
                    const valorTexto = totalCelula.textContent.replace("R$", "").replace(",", ".").trim();
                    totalGeral += parseFloat(valorTexto) || 0;
                }
            });

            document.getElementById("total-geral").textContent = `R$ ${totalGeral.toFixed(2).replace(".", ",")}`;
        }

        document.querySelectorAll('#tbl-produtos-vinculados tbody tr').forEach(tr => {
            produtosSelecionados.add(parseInt(tr.dataset.produtoId));
        });

        //Submit
        $("#frm-cadastro").on("submit", function (e) {
            e.preventDefault();

            const form = $(this);
            const url = "@Url.Action("Cadastro", "Orcamento")";

            const dados = form.serialize();

            if ($("[name^='Produtos']").length === 0) {
                Swal.fire("Aviso", "Adicione ao menos um produto ao pedido.", "warning");
                return;
            }

            $.ajax({
                type: "POST",
                url: url,
                data: dados,
                success: function (res) {
                    Swal.fire({
                        title: res,
                        text: "",
                        icon: 'success',
                        showCancelButton: false,
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'Ok',
                        showClass: {
                            popup: 'animate__animated animate__fadeInDown'
                        },
                        hideClass: {
                            popup: 'animate__animated animate__fadeOutUp'
                        }
                    }).then(() => {
                        var urlRetorno = "@Url.Action("Index", "Orcamento")";
                        location.replace(urlRetorno);
                    });
                },
                error: function (xhr) {
                    Swal.fire("Erro", xhr.responseText || "Falha ao salvar o pedido", "error");
                }
            });
        });
    </script>
}